{"version":3,"sources":["common/api.ts","containers/ItemReception.tsx","components/Delivery.tsx","containers/ItemIssue.tsx","containers/ItemReturn.tsx","components/Sidebar.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Api","_axios","getAvailableCell","barcode","post","processItem","cellId","itemBarcode","cell","getDelivery","userCode","updateDelivery","deliveryId","itemBarcodes","id","items","postReturn","this","axios","create","baseURL","instance","api","getInstance","ItemReception","React","setBarcode","currentCell","setCurrentCell","isFetching","setIsFetching","isSuccessfullyPlaced","setIsSuccessfullyPlaced","error","setError","className","style","width","htmlFor","disabled","type","value","onChange","e","parseInt","currentTarget","onClick","then","data","catch","err","response","finally","item","console","log","setTimeout","Delivery","delivery","onDeliveryReceived","selectedItems","setSelectedItems","cellIds","Array","from","Set","map","filter","c","client","FIO","length","join","key","checked","includes","i","deliveredDate","returnId","telNumber","passport","ItemIssue","setUserCode","currentDelivery","setCurrentDelivery","isSuccessfullyProcessed","setIsSuccessfullyProcessed","itemIds","ItemReturn","setItemBarcode","returned","Sidebar","src","alt","to","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.facef9a0.chunk.js","sourcesContent":["import axios, {AxiosInstance, AxiosResponse} from 'axios';\nimport {IDelivery} from \"./types\";\n\ntype AxiosPromise<T> = Promise<AxiosResponse<T>>\n\n\nclass Api {\n  private static instance: Api;\n\n  private _axios: AxiosInstance;\n\n\n  public constructor() {\n    this._axios = axios.create({\n      baseURL: 'https://aviahack-mai-2020.herokuapp.com/',\n    });\n  }\n\n  public static getInstance() {\n    if (!this.instance) {\n      this.instance = new this();\n    }\n\n    return this.instance;\n  }\n\n\n  getAvailableCell = (barcode: number): AxiosPromise<{ cell: number }> => (\n    this._axios.post('/get_available_cell', { barcode })\n  );\n\n\n  processItem = (cellId: number, itemBarcode: number): AxiosPromise<{ barcode: number, cell: number }> => (\n    this._axios.post('/put_in_cell', { barcode: itemBarcode, cell: cellId })\n  );\n\n\n  getDelivery = (userCode: string): AxiosPromise<IDelivery> => (\n    this._axios.post('/give_item', { userCode })\n  );\n\n\n  updateDelivery = (deliveryId: number, itemBarcodes: number[]): AxiosPromise<{ id: number, items: number[] }> => (\n    this._axios.post('/fix_given_item', { id: deliveryId, items: itemBarcodes })\n  );\n\n\n  postReturn = (itemBarcode: number): AxiosPromise<{ returnId: number, barcode: number }> => (\n    this._axios.post('/return_item', { barcode: itemBarcode })\n  );\n}\n\nconst api = Api.getInstance();\n\n\nexport default api;\n","import * as React from 'react';\nimport Api from '../common/api';\nimport { ICell } from '../common/types';\n\nconst ItemReception = () => {\n  const [barcode, setBarcode] = React.useState<number>(0);\n  const [currentCell, setCurrentCell] = React.useState<ICell | null>(null);\n\n  const [isFetching, setIsFetching] = React.useState(false);\n\n  const [isSuccessfullyPlaced, setIsSuccessfullyPlaced] = React.useState(false);\n  const [error, setError] = React.useState<string | null>(null);\n\n  const getCurrentCell = () => {\n    setIsFetching(true);\n    Api.getAvailableCell(barcode)\n      .then(({ data: { cell } }) => { setCurrentCell({ id: cell }); setError(null); })\n      .catch(({ response: { data: err } }) => setError(err.error))\n      .finally(() => { setIsFetching(false); });\n  };\n\n  const processItem = () => {\n    setIsFetching(true);\n    Api.processItem(currentCell!.id, barcode)\n      .then((item) => {\n        setIsFetching(false);\n        setIsSuccessfullyPlaced(true);\n        console.log(`Вещь ${item} размещена в ячейке ${currentCell!.id}`);\n        setTimeout(() => {\n          setIsSuccessfullyPlaced(false);\n          setBarcode(0);\n          setCurrentCell(null);\n        }, 3000);\n      });\n  };\n\n  return (\n    <div className=\"page\">\n      <h2>Прием товара</h2>\n\n      <div className=\"form item-reception-form\" style={{ width: '300px' }}>\n        <div className=\"form-input\">\n          <label htmlFor=\"barcode-input\">Штрихкод товара</label>\n          <input\n            id=\"barcode-input\"\n            disabled={!!currentCell || isFetching}\n            type=\"number\"\n            value={barcode || ''}\n            onChange={e => setBarcode(parseInt(e.currentTarget.value, 10))}\n          />\n        </div>\n        <button\n          disabled={!!currentCell || isFetching}\n          type=\"button\"\n          onClick={getCurrentCell}\n        >\n          Получить ячейку\n        </button>\n\n        {error ? <span className=\"error\">{error}</span> : ''}\n\n        {\n          currentCell\n            ? (\n              <div>\n                <h2>Ячейка: {currentCell.id}</h2>\n                <p>Разместите товар в указанной ячейке</p>\n                <button\n                  disabled={!currentCell || isFetching || isSuccessfullyPlaced}\n                  type=\"button\"\n                  onClick={processItem}\n                >\n                  Подтвердить размещение\n                </button>\n              </div>\n            ) : ''\n        }\n        {isSuccessfullyPlaced ? <span>Отлично, спасибо!</span> : ''}\n      </div>\n    </div>\n  );\n};\n\n\nexport default ItemReception;\n","import * as React from 'react';\nimport { IDelivery } from '../common/types';\n\n\ninterface IDeliveryProps {\n  delivery: IDelivery,\n  onDeliveryReceived: (itemIds: number[]) => void,\n}\n\nconst Delivery: React.FunctionComponent<IDeliveryProps> = ({ delivery, onDeliveryReceived }) => {\n  const [selectedItems, setSelectedItems] = React.useState<number[]>([]);\n\n  const onItemSelect = (itemBarcode: number) => {\n    if (selectedItems.includes(itemBarcode)) {\n      setSelectedItems(selectedItems.filter(i => i !== itemBarcode));\n    } else {\n      setSelectedItems([...selectedItems, itemBarcode]);\n    }\n  };\n\n  const cellIds = Array.from(new Set(delivery.items.map(item => item.cellId))).filter(c => c !== null);\n\n  return (\n    <div className=\"delivery\">\n      <h2>\n        Доставка <b>№{delivery.id}</b> {delivery.client ? <>для <b>{delivery.client.FIO}</b></> : ''}\n        <br />\n        <small>\n          {\n            // eslint-disable-next-line\n            cellIds.length === 1\n              ? (\n                `Ячейка: ${cellIds[0]}`\n              ) : (\n                cellIds.length === 0 ? '' : `Ячейки: ${cellIds.join(' и ')}`\n              )\n          }\n        </small>\n      </h2>\n\n      <div className=\"delivery-data\">\n        <div className=\"delivery-items-list\">\n          <h3>Товары:<br /><small>Отметьте обработанные товары</small></h3>\n          {delivery.items.map(item => (\n            <div className=\"delivery-item\" key={item.id}>\n              <span>\n                <input\n                  type=\"checkbox\"\n                  checked={selectedItems.includes(item.barcode)}\n                  onChange={() => onItemSelect(item.barcode)}\n                />\n              </span>\n              <span><b>Код: </b>{item.barcode}</span>\n              <span><b>Дата доставки: </b>{item.deliveredDate || '-'}</span>\n              <span><b>Ячейка: </b>{item.cellId || '-'}</span>\n              <span><b>ID Возврата: </b>{item.returnId || '-'}</span>\n            </div>\n          ))}\n        </div>\n\n        {delivery.client && (\n          <div className=\"delivery-client-info\">\n            <h3>Получатель:</h3>\n            <span><b>ФИО: </b>{delivery.client.FIO}</span>\n            <span><b>Телефон: </b>{delivery.client.telNumber}</span>\n            {delivery.client.passport ? <span><b>Паспорт: </b>{delivery.client.passport}</span> : ''}\n          </div>\n        )}\n      </div>\n\n      <button type=\"button\" onClick={() => onDeliveryReceived(selectedItems)}>\n        Готово\n      </button>\n    </div>\n  );\n};\n\n\nexport default Delivery;\n","import * as React from 'react';\nimport { IDelivery } from '../common/types';\nimport Api from '../common/api';\nimport Delivery from '../components/Delivery';\n\n\nconst ItemIssue = () => {\n  const [userCode, setUserCode] = React.useState('');\n  const [currentDelivery, setCurrentDelivery] = React.useState<IDelivery | null>(null);\n\n  const [isFetching, setIsFetching] = React.useState(false);\n\n  const [isSuccessfullyProcessed, setIsSuccessfullyProcessed] = React.useState(false);\n  const [error, setError] = React.useState<string | null>(null);\n\n  const getCurrentDelivery = () => {\n    setIsFetching(true);\n    setError(null);\n\n    Api.getDelivery(userCode)\n      .then(({ data: delivery }) => setCurrentDelivery(delivery))\n      .catch(({ response: { data: err } }) => setError(err.error))\n      .finally(() => { setIsFetching(false); });\n  };\n\n  const processCurrentDelivery = (itemIds: number[]) => {\n    setIsFetching(true);\n\n    Api.updateDelivery(currentDelivery!.id, itemIds)\n      .then(({ data: delivery }) => {\n        setIsFetching(false);\n        setIsSuccessfullyProcessed(true);\n        console.log('Доставка оработана', delivery);\n        setTimeout(() => {\n          setIsSuccessfullyProcessed(false);\n          setUserCode('');\n          setCurrentDelivery(null);\n        }, 3000);\n      });\n  };\n\n  return (\n    <div className=\"page\">\n      <h2>Выдача товара</h2>\n\n      <div className=\"form item-issue-form\" style={{ width: '300px' }}>\n        <div className=\"form-input\">\n          <label htmlFor=\"usercode-input\">Код получения:</label>\n          <input\n            id=\"usercode-input\"\n            disabled={isFetching}\n            type=\"text\"\n            value={userCode}\n            onChange={e => setUserCode(e.currentTarget.value)}\n          />\n        </div>\n\n        <button\n          disabled={isFetching}\n          type=\"button\"\n          onClick={getCurrentDelivery}\n        >\n          Запросить\n        </button>\n      </div>\n\n      {error ? <span className=\"error\">{error}</span> : ''}\n\n      {isFetching ? 'Загрузка...' : ''}\n\n      {\n        currentDelivery\n          ? (\n            <Delivery\n              delivery={currentDelivery}\n              onDeliveryReceived={processCurrentDelivery}\n            />\n          ) : ''\n      }\n      {\n        isSuccessfullyProcessed\n          ? <h3>Отлично, спасибо!</h3>\n          : ''\n      }\n    </div>\n  );\n};\n\n\nexport default ItemIssue;\n","import * as React from 'react';\nimport { IDelivery } from '../common/types';\nimport Api from '../common/api';\nimport Delivery from '../components/Delivery';\n\nconst ItemReturn = () => {\n  const [itemBarcode, setItemBarcode] = React.useState<number>(0);\n\n  const [isFetching, setIsFetching] = React.useState(false);\n\n  const [isSuccessfullyProcessed, setIsSuccessfullyProcessed] = React.useState(false);\n  const [error, setError] = React.useState<string | null>(null);\n\n  const postReturn = () => {\n    setIsFetching(true);\n    setError(null);\n\n    Api.postReturn(itemBarcode)\n      .then(({ data: returned }) => {\n        setIsSuccessfullyProcessed(true);\n        console.log('Возврат произведен', returned);\n        setTimeout(() => {\n          setIsSuccessfullyProcessed(false);\n          setItemBarcode(0);\n        }, 2000);\n      })\n      .catch(({ response: { data: err } }) => setError(err.error))\n      .finally(() => { setIsFetching(false); });\n  };\n  //\n  // const processCurrentDelivery = (itemId: number) => {\n  //   setIsFetching(true);\n  //\n  //   Api.postReturn(itemId)\n  //     .then(({ data: returned }) => {\n  //       setIsFetching(false);\n  //       setIsSuccessfullyProcessed(true);\n  //       console.log('Возврат произведен', returned);\n  //       setTimeout(() => {\n  //         setIsSuccessfullyProcessed(false);\n  //         setUserCode('');\n  //         setCurrentDelivery(null);\n  //       }, 3000);\n  //     });\n  // };\n\n  return (\n    <div className=\"page\">\n      <h2>Возврат товара</h2>\n\n      <div className=\"form item-issue-form\" style={{ width: '300px' }}>\n        <div className=\"form-input\">\n          <label htmlFor=\"return-usercode-input\">Код получения:</label>\n          <input\n            id=\"return-usercode-input\"\n            disabled={isFetching}\n            type=\"number\"\n            value={itemBarcode || ''}\n            onChange={e => setItemBarcode(parseInt(e.currentTarget.value, 10))}\n          />\n        </div>\n        <button\n          disabled={isFetching}\n          type=\"button\"\n          onClick={postReturn}\n        >\n          Запросить\n        </button>\n      </div>\n\n      {error ? <span className=\"error\">{error}</span> : ''}\n\n      {isFetching ? 'Загрузка...' : ''}\n\n      {\n        isSuccessfullyProcessed\n          ? <h3>Возврат оформлен, спасибо!</h3>\n          : ''\n      }\n    </div>\n  );\n};\n\n\nexport default ItemReturn;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nconst Sidebar = () => (\n  <nav className=\"sidebar\">\n    <div className=\"wb-logo\">\n      <img src=\"https://halykhelp.kz/wp-content/uploads/2018/08/Wildberries-logo.png\" alt=\"wb_logo\" />\n      <span>Пункт выдачи заказов</span>\n    </div>\n    <Link to=\"/reception\">Прием</Link>\n    <Link to=\"/issue\">Выдача</Link>\n    <Link to=\"/return\">Возврат</Link>\n  </nav>\n);\n\n\nexport default Sidebar;\n","import * as React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport './App.scss';\n\nimport ItemReception from './containers/ItemReception';\nimport ItemIssue from './containers/ItemIssue';\nimport ItemReturn from './containers/ItemReturn';\nimport Sidebar from './components/Sidebar';\n\n\nconst App = () => (\n  <Router>\n    <div id=\"app\">\n\n      <Sidebar />\n\n      <Switch>\n        <div className=\"workspace\">\n          <Route exact path={['/', '/reception']}>\n            <ItemReception />\n          </Route>\n          <Route path=\"/issue\">\n            <ItemIssue />\n          </Route>\n          <Route path=\"/return\">\n            <ItemReturn />\n          </Route>\n        </div>\n      </Switch>\n\n    </div>\n  </Router>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}